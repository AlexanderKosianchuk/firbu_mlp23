// Generated by Quartus II Version 11.1 Build 216 11/23/2011 Service Pack 1 SJ Web Edition
// Created on Sat Jan 21 14:14:07 2012

`include "timescale.v"
`include "defines.v"

module commandManager( 
RST,
SD_CLK,
//init
INIT_ENA,
INIT_COMPLT,
INIT_ERROR_NO_RESP,
INIT_ERROR_UNAVALIABLEVV,
//readBlock
RB_ENA,
RB_COMPLT,
RB_CMDERROR,
RB_CRCERROR,
RB_NORESPERROR,
WENA_SR,
WADDR_SR,
INPUT_SR,
//writeBlock
W_READY,
W_ERROR,
WRITE_TYPE,

WB_ENA,
WB_COMPLT,
RENA_SW,
RCLK_SW,
RADDR_SW,
OUTPUT_SW,
//readMultBlock
RMB_ENA,
RMB_READY,
RMB_COUNT,
RMB_COMPLT,
//writeMultBlock
WMB_ENA,
WMB_READY,
WMB_COUNT,
WMB_NUM,
WMB_COMPLT,
WMB_STOP_TRSFR,
BUFREADY,// 01 - firstBufReady, 10 - secondBufReady
BUFWAITING,
//W_READY,
//W_ERROR,
//
ADDR,
DATA,
SD_CMD,
SD_DAT);

input  wire          RST;
input  wire          SD_CLK;
inout  wire          SD_CMD;
inout  wire [3:0]    SD_DAT;

//init
input  wire          INIT_ENA;
output reg           INIT_COMPLT;
output reg           INIT_ERROR_NO_RESP;
output reg           INIT_ERROR_UNAVALIABLEVV;
//readBlock
input  wire          RB_ENA;
output reg           RB_COMPLT;
output reg           RB_CMDERROR;
output wire          RB_CRCERROR;
output wire          RB_NORESPERROR;
input	 wire          WENA_SR;
input	 wire [9:0]    WADDR_SR;
input	 wire [3:0]    INPUT_SR;
//writeBlock
output reg           W_READY;
output reg           W_ERROR;
input  wire [1:0]    WRITE_TYPE; //00-manual, 01-from RAM, 10-multFromBuf, 11-multOnAir

input  wire          WB_ENA;
output reg           WB_COMPLT;
output wire          RENA_SW;
output wire          RCLK_SW;
output wire [10:0]   RADDR_SW;
input  wire [3:0]    OUTPUT_SW;
//readMultBlock
input  wire          RMB_ENA;
output reg           RMB_READY;
input  wire [31:0]   RMB_COUNT;
output reg           RMB_COMPLT;
//writeMultBlock
input  wire          WMB_ENA;
output reg           WMB_READY;
input  wire [31:0]   WMB_COUNT;
output wire [31:0]   WMB_NUM;
output reg           WMB_COMPLT;
input  wire          WMB_STOP_TRSFR;
input  wire [1:0]    BUFREADY;// 01 - firstBufReady, 10 - secondBufReady
output reg  [1:0]    BUFWAITING;
//
input  wire [31:0]   ADDR;
input  wire [4095:0] DATA;

localparam CMD0dummy = 38'b000000_0000000000_0000000000_0000000000_00; //from all states go idle
localparam CMD2dummy = 38'b000010_0000000000_0000000000_0000000000_00; //ready - get CID
localparam CMD3dummy = 38'b000011_0000000000_0000000000_0000000000_00; //ident - get RESP_STP[RCAbeg:RCAend]
localparam CMD6dummy = 38'b000110_0000000000_0000000000_0000000000_10; //transfr - change bus width to wide bus (4)
localparam CMD7dummy = 38'b000111_0000000000000000_0000000000000000; //stby - select card by RESP_STP[RCAbeg:RCAend]
localparam CMD8dummy = 38'b001000_00000000000000000000_0001_10101010; //idle - get OCR
localparam CMD12dummy = 38'b001100_0000000000_0000000000_0000000000_00; //transfr - stop transmission
localparam CMD16dummy = 38'b010000_0000000000_0000000000_0010000000_00; //transfr - change block length (512b)
//read
localparam CMD17dummy = 38'b010001_0000_0011_0000_1101_0100_0000_0000_0000; //transfr - set address (100*512) and read begin
localparam CMD18dummy = 38'b010010_0000_0011_0000_1101_0100_0000_0000_0000; //transfr - set address and read begin

localparam CMD23dummy = 38'b001000_0000000000_0000000000_111110100000; //transfr - set block count for multipl writing (4000) (to write 1MB)
//write
localparam CMD24dummy = 38'b011000_0000_0011_0000_1101_0100_0000_0000_0000; //transfr - set address (100*512) and transfer begin
localparam CMD25dummy = 38'b011001_0000_0011_0000_1101_0100_0000_0000_0000; //transfr - set address and transfer begin

localparam CMD41dummy = 38'b101001_01000000_0000000000000000_00000000; //idle - set operating conditions
localparam CMD55dummy = 38'b110111_0000000000000000_0000000000000000; //prepare for ACMD

localparam cardStateIdle = 4'b0000;
localparam cardStateReady = 4'b0001;
localparam cardStateIdent= 4'b0010;
localparam cardStateStby= 4'b0011;
localparam cardStateTransfr = 4'b0100;
localparam cardStateData = 4'b0101;
localparam cardStateRcv = 4'b0110;

localparam cmdTotalWidth = 47; // [47:0] -> 48
localparam cmdWithoutCrcWidth = 39; // [39:0] -> 40
localparam cmdBobyWidth = 37; // [37:0] -> 38 without start end transmit bits

localparam crcWidth = 6; // [6:0] -> 7
localparam crcInCmdBeg = 7;
localparam crcInCmdEnd= 1;

localparam respWidth = 47; // [47:0] -> 48
localparam respWidthLarge = 135; // [135:0] -> 136

localparam cardErr = 1, cardNoErr = 0;
localparam cardReadyForData = 1, cardNotReady = 0;

reg [respWidth:0] R1;
reg [respWidth:0] R1a;
reg [respWidth:0] R1b;
localparam cardStateBeg = 20, cardStateEnd = 17;
localparam crcErr = 31, genErrBit = 27, internalErrBit = 28, readyForDataBit = 16;

reg [respWidthLarge:0] R2_CID;

reg [respWidth:0] R3;
localparam bisyBit = 39;
localparam OCRbeg = 31, OCRend = 16;
localparam acmd41InitTime = 8'b00010000;

reg [respWidth:0] R6;
localparam RCAbeg = 39, RCAend = 24;
localparam crcPrevComBit = 23, illegalCmdBit = 22, generalErrorBit = 21;

reg [respWidth:0] R7;
localparam voltageEcceptBeg = 19, voltageEcceptEnd = 16;
localparam voltageWindow = CMD8dummy[voltageEcceptBeg-8:voltageEcceptEnd-8];

//=========================================

localparam
//------------------------------------
beforeInit = 00,
unavaliable = 01,
waitAction  = 02,

//idle	
idleInitMute = 11,
idleCMD0PrgNeed = 12,
idleCMD0Mute = 13,
idleCMD0Begin = 14,
idleCMD8Mute = 15,
idleCMD8Begin = 16,
idleCMD8WaitResp = 17,
idleCMD8RespCheck = 18,
idleCMD55Mute = 19,
idleCMD55Begin = 20,
idleCMD55WaitResp = 21,
idleCMD55RespCheck = 22,
idleCMD41Begin = 23,
idleCMD41WaitResp = 24,
idleCMD41RespCheck = 25,
idleCMD41VoltageMute = 26,

//ready
readyCMD2Mute = 30,
readyCMD2Begin = 31,
readyCMD2WaitResp = 32,
readyCMD2RespCheck = 33,

//ident
identCMD3Mute = 40,
identCMD3Begin = 41,
identCMD3WaitResp = 42,
identCMD3RespCheck = 43,

//stby
stbyCMD7Mute = 50,
stbyCMD7Begin = 51,
stbyCMD7WaitResp = 52,
stbyCMD7RespCheck = 53,
stbyCMD7PrgNeed = 54,

//transfr
transfrCMD55Mute = 60,
transfrCMD55Begin = 61,
transfrCMD55WaitResp = 62,
transfrCMD55RespCheck = 63,
transfrCMD6Begin = 64,
transfrCMD6WaitResp = 65,
transfrCMD6RespCheck = 66,

transfrCMD16Mute = 67,
transfrCMD16Begin = 68,
transfrCMD16WaitResp = 69,
transfrCMD16RespCheck = 70,

initComplt = 71,
//------------------------------------
transfrBlockWriteCMD24Mute      = 100,
transfrBlockWriteCMD24Begin     = 101,
transfrBlockWriteCMD24WaitResp  = 102,
transfrBlockWriteCMD24RespCheck = 103,
transfrBlockWriteMute           = 104,
transfrBlockWrite               = 105,
transfrBlockWriteWaitStatus     = 106,
transfrBlockWritePrgNeed        = 107,
transfrBlockWriteComplt         = 108,
//------------------------------------
transfrBlockReadCMD17Mute      = 200,
transfrBlockReadCMD17Begin     = 201,
transfrBlockReadCMD17WaitResp  = 202,
transfrBlockReadCMD17RespCheck = 203,
transfrBlockRead               = 204,
transfrBlockReadComplt         = 205,
//------------------------------------
transfrMultWriteCMD25Mute           = 301,
transfrMultWriteCMD25Begin          = 302,
transfrMultWriteCMD25WaitResp       = 303,
transfrMultWriteCMD25RespCheck      = 304,
transfrMultWriteMute                = 305,
transfrMultWrite                    = 306,
transfrMultWriteWaitStatus          = 307,
transfrMultWritePrgNeed             = 308,
transfrMultWriteCheckComplt         = 309,
transfrMultWriteCMD12Mute           = 310,
transfrMultWriteCMD12Begin          = 311,
transfrMultWriteCMD12WaitResp       = 312,
transfrMultWriteCMD12RespCheck      = 313,
transfrMultWriteCMD12PrgNeed        = 314,
transfrMultWriteComplt              = 315,

transfrMultWriteWaitFirstBufFull    = 316,
transfrMultWriteFirstBuf            = 317,
transfrMultWriteWaitFirstBufStatus  = 318,
transfrMultWritePrgNeedFirstBuf     = 319,
transfrMultWriteWaitSecondBufFull   = 320,
transfrMultWriteSecondBuf           = 321,
transfrMultWriteWaitSecondBufStatus = 322,
transfrMultWritePrgNeedSecondBuf    = 323;

reg [32:0] state;
reg [32:0] nextState;
    
//=========================================
reg  ENA_IM;
wire COMPLT_IM;
//-------
`ifdef doNotSimSDprg
defparam initMute.Tm = 5;
`else
defparam initMute.Tm = 1000;
`endif
muteCounter initMute(
SD_CLK,
RST,
ENA_IM,
COMPLT_IM);

//=========================================
reg  ENA_CM;
wire COMPLT_CM;
//-------
`ifdef sim
defparam muteAfterCMD.Tm = 5;
`else
defparam muteAfterCMD.Tm = 1000;
`endif
muteCounter muteAfterCMD(
SD_CLK,
RST,
ENA_CM,
COMPLT_CM);

//=========================================
reg  ENA_VM;
wire COMPLT_VM;
//-------
`ifdef doNotSimSDprg
defparam muteAfterVoltageRelease.Tm = 5;
`else
defparam muteAfterVoltageRelease.Tm = 1000;
`endif
muteCounter muteAfterVoltageRelease(
SD_CLK,
RST,
ENA_VM,
COMPLT_VM);

//=========================================
reg  ENA_RM;
wire COMPLT_RM;
//-------
defparam muteRespCheck.Tm = 5;
muteCounter muteRespCheck(
SD_CLK,
RST,
ENA_RM,
COMPLT_RM);

//=========================================
reg  ENA_PTS;
wire COMPLT_PTS;
reg  [cmdBobyWidth:0] CMDBODY_PTS;
//-------
parallelCmdToSerialConverter PTS(
SD_CLK, 
RST,
ENA_PTS,
COMPLT_PTS,
CMDBODY_PTS,
SD_CMD);

//=========================================
reg  ENA_STP;
wire COMPLT_STP;
wire STATUS_STP; //1 - err, 0 - ok
wire NORESP_STP;	//1 - err, 0 - ok
wire CRC_ERROR_STP; //1 - err, 0 - ok
reg  [5:0] CMDINDEX_STP;
wire [respWidth:0] RESP_STP;
//-------
defparam STP.outputParallelRespWidth = respWidth; 	
serialRespToParallelConverter STP(
SD_CLK, 
RST,
ENA_STP,
COMPLT_STP,
STATUS_STP,
NORESP_STP,
CRC_ERROR_STP,
CMDINDEX_STP,	
SD_CMD, 
RESP_STP);
 
//=========================================
reg  ENA_STP_LR;
wire COMPLT_STP_LR;
wire STATUS_STP_LR; //1 - err, 0 - ok
wire NORESP_STP_LR;	//1 - err, 0 - ok
wire CRC_ERROR_STP_LR; //1 - err, 0 - ok
reg  [5:0] CMDINDEX_STP_LR;
wire [respWidthLarge:0] RESP_STP_LR;
//-------
defparam STP_LR.outputParallelRespWidth = respWidthLarge; 	
serialRespToParallelConverter STP_LR(
SD_CLK, 
RST,
ENA_STP_LR,
COMPLT_STP_LR,
STATUS_STP_LR,
NORESP_STP_LR,
CRC_ERROR_STP_LR,
CMDINDEX_STP_LR,
SD_CMD, 
RESP_STP_LR);

always @ (posedge COMPLT_STP)
begin
case (state)
idleCMD8WaitResp:
	R7 <= RESP_STP;
idleCMD55WaitResp:
	R1 <= RESP_STP;
idleCMD41WaitResp:
	R3 <= RESP_STP;
readyCMD2WaitResp:
	R2_CID <= RESP_STP_LR;
identCMD3WaitResp:
	R6 <= RESP_STP;
stbyCMD7WaitResp:
	R1a <= RESP_STP;
transfrCMD55WaitResp:
	R1 <= RESP_STP;
transfrCMD6WaitResp:
	R1 <= RESP_STP;
transfrCMD16WaitResp:
	R1 <= RESP_STP;
transfrBlockWriteCMD24WaitResp:
	R1 <= RESP_STP;
transfrBlockReadCMD17WaitResp:
	R1 <= RESP_STP;
transfrMultWriteCMD25WaitResp:
	R1 <= RESP_STP;
transfrMultWriteCMD12WaitResp:
	R1b <= RESP_STP;
endcase
end

//=========================================
reg  ENA_DW_P;
wire COMPLT_DW_P;
//-------
parallelToWideBusDataWriter dataWriterParallelUnit(
SD_CLK,
RST, 
ENA_DW_P,
COMPLT_DW_P,

DATA, 
SD_DAT);

//=========================================
reg         ENA_DW_R;
wire        COMPLT_DW_R;
reg  [10:0] RADDR_BEGIN_R;

dataWriter dataWriterFromRAMUnit(
SD_CLK,
ENA_DW_R,
RENA_SW,
RCLK_SW,
RADDR_SW,
RADDR_BEGIN_R,
OUTPUT_SW,
SD_DAT,
COMPLT_DW_R);

always @(negedge SD_CLK)
begin
	if((state == transfrMultWriteSecondBuf) || 
	(state == transfrMultWriteWaitSecondBufStatus) ||
	(state == transfrMultWritePrgNeedSecondBuf) ||
	(state == transfrMultWriteCheckComplt) ||
	(state == transfrMultWriteWaitFirstBufFull))
	begin
		BUFWAITING <= 2'b01;
	end
	else if((state == transfrMultWrite) ||
	(state == transfrMultWriteFirstBuf) || 
	(state == transfrMultWriteWaitFirstBufStatus) ||
	(state == transfrMultWritePrgNeedFirstBuf) ||
	(state == transfrMultWriteWaitSecondBufFull))	
	begin
		BUFWAITING <= 2'b10;
	end
	else
	begin
		BUFWAITING <= 2'b00;
	end
end
 
//=========================================
reg  ENA_DW_OA;
wire COMPLT_DW_OA;
wire CLK_ADC;
wire [7:0] INPUT_ADC;

dataWriterOnAir dataWriterOnAirUnit(
SD_CLK,
ENA_DW_OA,
CLK_ADC,
INPUT_ADC,
SD_DAT,
COMPLT_DW_OA);
//=========================================
reg  ENA_DS;
wire COMPLT_DS;
wire STATUS_DS;

wire   COMPLT_PRG;
assign COMPLT_PRG = SD_DAT[0];
//-------
dataCRCStatus dataCRCStatusUnit(
SD_CLK,
RST, 
ENA_DS,
COMPLT_DS,

STATUS_DS, 
COMPLT_PRG);

//=========================================
reg  ENA_DR;
wire COMPLT_DR;
//-------
dataReader dataReaderUnit(
SD_CLK,
RST,
ENA_DR,
INPUT_SR,
WENA_SR,
WADDR_SR,  
SD_DAT,
RB_CRCERROR,
RB_NORESPERROR,
COMPLT_DR);

//=========================================
reg RST_BC;
reg ADDONE_BC;
//WMB_NUM;//mult block transfer
//-------
transfrMultBlockWriteCounter transfrMultBlockWriteCounterUnit(
RST_BC,
ADDONE_BC,
WMB_NUM);

//=========================================
reg [31:0] currAddr;	
localparam currAddrInit = 32'b0000_0000_0000_0101_0000_1110_0000_0000;
reg RST_ADRC;
reg ADDONE_ADRC;
wire [31:0] BLOCKNUM_ADRC;
//-------
blockCounter addressCounter(
RST_ADRC,
ADDONE_ADRC,
BLOCKNUM_ADRC);

//=========================================
localparam cmdRepeatArbiter =  7'b101;
reg RST_RC;
reg ADDONE_RC;
wire [2:0] BLOCKNUM_RC;
//-------
cmdRepeatCounter cmdRepeatCounterUnit(
RST_RC,
ADDONE_RC,
BLOCKNUM_RC);
//=========================================
reg RST_AC;
reg ADDONE_AC;
wire [7:0] BLOCKNUM_AC;
//-------
acmdCounter acmdCounterUnit(
RST_AC,
ADDONE_AC,
BLOCKNUM_AC);
//=========================================

//FSM

always @(posedge SD_CLK or posedge RST)
begin

if(RST) 
begin
	state <= beforeInit;
end
else
begin
	if(INIT_ENA	&& !RB_ENA	&& !WB_ENA	&& !RMB_ENA	&& !WMB_ENA)
	begin
		if	(state == beforeInit)
		begin
			state <= idleInitMute;
		end
		else
		begin
			state <= nextState;
		end
	end
	else if(!INIT_ENA	&& !RB_ENA && WB_ENA	&& !RMB_ENA	&& !WMB_ENA)
	begin
		if	(state == waitAction)
		begin
			state <= transfrBlockWriteCMD24Mute;
		end
		else
		begin
			state <= nextState;
		end
	end
	else if(!INIT_ENA	&& RB_ENA && !WB_ENA	&& !RMB_ENA	&& !WMB_ENA)
	begin
		if	(state == waitAction)
		begin
			state <= transfrBlockReadCMD17Mute;
		end
		else
		begin
			state <= nextState;
		end
	end
	else if(!INIT_ENA	&& !RB_ENA && !WB_ENA	&& RMB_ENA	&& !WMB_ENA)
	begin
		if	(state == waitAction)
		begin
			state <= transfrBlockReadCMD17Mute;
		end
		else
		begin
			state <= nextState;
		end
	end
	else if(!INIT_ENA	&& !RB_ENA && !WB_ENA	&& !RMB_ENA	&& WMB_ENA)
	begin
		if	(state == waitAction)
		begin
			state <= transfrMultWriteCMD25Mute;
		end
		else
		begin
			state <= nextState;
		end
	end
	else if(!INIT_ENA	&& !RB_ENA && !WB_ENA	&& !RMB_ENA	&& !WMB_ENA)
	begin
		if	(state == beforeInit)
		begin
			state <= beforeInit;
		end
		else
		begin
			state <= waitAction;
		end
	end
	  
end

end

always @(RST or state or
COMPLT_PTS or COMPLT_STP or COMPLT_STP_LR or
COMPLT_DW_P or COMPLT_DW_R or COMPLT_DW_OA or COMPLT_DS or COMPLT_PRG or COMPLT_DR or
COMPLT_IM or COMPLT_CM or COMPLT_RM or
BUFREADY) 
begin

if (RST) 
begin							
	ENA_CM <= 1'b0;
	ENA_IM <= 1'b0;
	ENA_VM <= 1'b0;
	ENA_RM <= 1'b0;
	ENA_PTS <= 1'b0;
	ENA_STP <= 1'b0;
	ENA_STP_LR <= 1'b0;
	ENA_DS <= 1'b0;
	ENA_DW_P <= 1'b0;
	ENA_DW_R <= 1'b0;
	ENA_DW_OA <= 1'b0;
	ENA_DR <= 1'b0;
		
	RST_BC <= 1'b1;
	RST_RC <= 1'b1; 
	RST_AC <= 1'b1;
	RST_ADRC <= 1'b1;
		
	INIT_ERROR_NO_RESP <= 1'b0;
	INIT_ERROR_UNAVALIABLEVV <= 1'b0;
	
	RADDR_BEGIN_R <= 11'h000;
	
end
else 
begin

case (state)

//idle-------------------------------------

beforeInit:
begin
	ENA_CM <= 1'b1;
	
	INIT_COMPLT <= 1'b0;
	RB_COMPLT <= 1'b0;
	WB_COMPLT <= 1'b0;
	RMB_COMPLT <= 1'b0;
	WMB_COMPLT <= 1'b0;
	
	INIT_ERROR_NO_RESP <= 1'b0;
	INIT_ERROR_UNAVALIABLEVV <= 1'b0;
	
	nextState <= beforeInit;
end

//idleInitMute=============================

idleInitMute:
begin
	if(COMPLT_IM == 1'b0)
	begin
		ENA_IM <= 1'b1;
		ENA_CM <= 1'b0;
		
		nextState <= idleInitMute;
	end
	else if(COMPLT_IM == 1'b1)
	begin
		`ifdef doNotSimSDprg
		nextState <= idleCMD0Mute;
		`else
		nextState <= idleCMD0PrgNeed;
		`endif
	end
	else
	begin
		nextState <= idleInitMute;
	end
end

//idleCMD0PrgNeed===========================
idleCMD0PrgNeed:
begin

	ENA_IM <= 1'b0;

	if(COMPLT_PRG == 1'b0)
	begin
		nextState <= idleCMD0PrgNeed;
	end
	else if (COMPLT_PRG == 1'b1)
	begin
		nextState <= idleCMD0Mute;
	end
	else
	begin
		nextState <= idleCMD0PrgNeed;
	end	
end

//CMD0Mute=============================

idleCMD0Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_IM <= 1'b0;
		ENA_CM <= 1'b1;
		ENA_VM <= 1'b0;
		ENA_RM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		ENA_STP_LR <= 1'b0;
		ENA_DS <= 1'b0;
		ENA_DW_P <= 1'b0;
		ENA_DW_R <= 1'b0;
		ENA_DW_OA <= 1'b0;
		ENA_DR <= 1'b0;
			
		RST_BC <= 1'b1;
		RST_RC <= 1'b1;
		RST_AC <= 1'b1;
		RST_ADRC <= 1'b1;		
		
		nextState <= idleCMD0Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
	`ifdef doNotSimSDinit						
    nextState <= initComplt;
  `else
    nextState <= idleCMD0Begin;
  `endif
	end
	else
	begin
		nextState <= idleCMD0Mute;
	end
end
									
//CMD0transferBegin=======================

idleCMD0Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_IM <= 1'b0;
		ENA_VM <= 1'b0;
		ENA_RM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ENA_STP_LR <= 1'b0;
		ENA_DS <= 1'b0;
		ENA_DW_P <= 1'b0;
		ENA_DW_R <= 1'b0;
		ENA_DW_OA <= 1'b0;
		ENA_DR <= 1'b0;
		
		RST_BC <= 1'b0;
		RST_RC <= 1'b0;
		RST_AC <= 1'b0;
		RST_ADRC <= 1'b0;
				
		CMDBODY_PTS <= CMD0dummy;
		nextState <= idleCMD0Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD0");
		nextState <= idleCMD8Mute;
	end
	else
	begin
		nextState <= idleCMD0Begin;
	end
end
				
//idleCMD8Mute===========================

idleCMD8Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		
		nextState <= idleCMD8Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= idleCMD8Begin;
	end
	else
	begin
		nextState <= idleCMD8Mute;
	end
end
		
//CMD8transferBegin=======================		

idleCMD8Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP <= CMD8dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS <= CMD8dummy;
		nextState <= idleCMD8Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD8");
		nextState <= idleCMD8WaitResp;
	end
	else
	begin
		nextState <= idleCMD8Begin;
	end
end
			
//CMD8waitResponse======================

idleCMD8WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		ADDONE_RC <= 1'b0;
		
		nextState <= idleCMD8WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for response errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
		   (CRC_ERROR_STP == 1'b0))
		begin
			nextState <= idleCMD8RespCheck;
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD8 response error");
				nextState <= idleCMD8Begin;
			end
			else if(BLOCKNUM_RC >= cmdRepeatArbiter)
			begin
				nextState <= idleCMD0Mute;
			end
		end
	end
	else
	begin
		nextState <= idleCMD8WaitResp;
	end
end

//CMD8RespCheck======================

idleCMD8RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		
		RST_RC <= 1'b1;

		nextState <= idleCMD8RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check capability of voltage window
		if(R7[voltageEcceptBeg:voltageEcceptEnd] == voltageWindow)
		begin
			$display("CMD8 R7 vv %b ", R7[voltageEcceptBeg:voltageEcceptEnd]);
			nextState <= idleCMD55Mute;
		end
		else
		begin
			//Unavaliable card voltage window
			$display("%b Unavaliable card voltage window", $time);
			INIT_ERROR_UNAVALIABLEVV <= 1'b0;
			nextState <= unavaliable;
		end
	end
	else
	begin
		nextState <= idleCMD8RespCheck;
	end
end

//CMD55Mute=============================

idleCMD55Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_VM <= 1'b0;
		ENA_RM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		RST_RC <= 1'b0;

		nextState <= idleCMD55Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= idleCMD55Begin;
	end
	else
	begin
		nextState <= idleCMD55Mute;
	end
end
		
//CMD55transferBegin=======================	

idleCMD55Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;
		ADDONE_AC <= 1'b1;
		
		CMDINDEX_STP <= CMD55dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS <= CMD55dummy;
		nextState <= idleCMD55Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD55");
		nextState <= idleCMD55WaitResp;
	end
	else
	begin
		nextState <= idleCMD55Begin;
	end
end

//CMD55waitResponse=======================

idleCMD55WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		ADDONE_RC <= 1'b0;
		ADDONE_AC <= 1'b0;
				
		nextState <= idleCMD55WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
		   (CRC_ERROR_STP == 1'b0))
		begin
			nextState <= idleCMD55RespCheck;
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD55 response error");
				nextState <= idleCMD55Mute;
			end
			else
			begin
				nextState <= idleCMD0Mute;
			end
		end
	end
	else
	begin
		nextState <= idleCMD55WaitResp;
	end
end

//CMD55RespCheck======================
	
idleCMD55RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		
		RST_RC <= 1'b1;

		nextState <= idleCMD55RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		if(((R1[cardStateBeg:cardStateEnd] == cardStateIdle) || 
			(R1[cardStateBeg:cardStateEnd] == cardStateReady)) && // supposed card current state is idle
			(R1[genErrBit] == cardNoErr) && // no general errors
			(R1[internalErrBit] == cardNoErr)) // no internal errors
	begin
		if(R1[crcErr] == cardNoErr)
		begin
			$display("CMD 55 R1 cur st %b , readyForData %b", R1[cardStateBeg:cardStateEnd], R1[readyForDataBit]);
			nextState <= idleCMD41Begin;
		end
		else
		begin
			$display("CRCError before CMD 55 seq");
			nextState <= idleCMD0Mute;
		end
	end
	end
	else
	begin
		nextState <= idleCMD55RespCheck;
	end
end
		
//CMD41transferBegin=======================	

idleCMD41Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_RM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		
		CMDINDEX_STP <= 6'b111111; // specifig for ACMD41

		if(BLOCKNUM_AC <= 4'b0001)
		begin
				CMDBODY_PTS <= CMD41dummy;
		end
		else
		begin
			CMDBODY_PTS [37:24] <= CMD41dummy[37:24];
			CMDBODY_PTS [23:8]<= R3[OCRbeg:OCRend];
			CMDBODY_PTS [7:0] <= CMD41dummy[7:0];
		end
		
		nextState <= idleCMD41Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD41");
		nextState <= idleCMD41WaitResp;
	end
	else
	begin
		nextState <= idleCMD41Begin;
	end
end
	
//CMD41waitResponse=======================

idleCMD41WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		
		nextState <= idleCMD41WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if(NORESP_STP == 1'b0)
		begin
			nextState <= idleCMD41RespCheck;
		end
		else
		begin
			$display("CMD41 response error");
			nextState <= idleCMD55Mute;
		end
	end
	else
	begin
		nextState <= idleCMD41WaitResp;
	end
end

//CMD41RespCheck======================

idleCMD41RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		
		RST_RC <= 1'b1;

		nextState <= idleCMD41RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
			if (BLOCKNUM_AC > 4'b0001)
			begin
				//check bisyBit
				if(R3[bisyBit] == 1'b1)
				begin
					nextState <= readyCMD2Mute;
				end
				else
				begin
				  `ifdef doNotSimSDprg
				  nextState <= readyCMD2Mute;
				  `else
				  nextState <= idleCMD41VoltageMute;
				  `endif
				end
			end
			else
			begin
				nextState <= idleCMD55Mute;
			end
	end
	else
	begin
		nextState <= idleCMD41RespCheck;
	end
end

//CMD41VoltageMute====================

idleCMD41VoltageMute:
begin
	if(COMPLT_VM == 1'b0)
	begin
		ENA_VM <= 1'b1;
		ENA_STP <= 1'b0;
		ENA_RM <= 1'b0;

		nextState <= idleCMD41VoltageMute;
	end
	else if(COMPLT_VM == 1'b1)
	begin
	  if(BLOCKNUM_AC < acmd41InitTime)
		begin
		  nextState <= idleCMD55Mute;
		end
		else
		begin
		  nextState <= idleCMD0Mute;
		  //nextState <= readyCMD2Mute;
		end
	end
	else
	begin
		nextState <= idleCMD41VoltageMute;
	end
end

//ready-------------------------------------		

//idleCMD2Mute===========================

readyCMD2Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_VM <= 1'b0;
		ENA_RM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		ENA_STP_LR <= 1'b0;
		
		RST_AC <= 1'b1;
		RST_RC <= 1'b0;
		
		nextState <= readyCMD2Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= readyCMD2Begin;
	end
	else
	begin
		nextState <= readyCMD2Mute;
	end
end
		
//CMD2transferBegin=======================		

readyCMD2Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ENA_STP_LR <= 1'b0;
		
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP_LR <= 6'b111111;
		CMDBODY_PTS <= CMD2dummy;
		nextState <= readyCMD2Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD2");
		nextState <= readyCMD2WaitResp;
	end
	else
	begin
		nextState <= readyCMD2Begin;
	end
end
			
//CMD2waitResponse======================

readyCMD2WaitResp:
begin
	if(COMPLT_STP_LR == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		ENA_STP_LR <= 1'b1;
		
		ADDONE_RC <= 1'b0;
		
		nextState <= readyCMD2WaitResp;
	end
	else if(COMPLT_STP_LR == 1'b1)
	begin
		//check for response errors
		if(NORESP_STP_LR == 1'b0)
		begin
			nextState <= readyCMD2RespCheck;
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD2 response error");
				nextState <= readyCMD2Mute;
			end
			else if (BLOCKNUM_RC >= cmdRepeatArbiter)
			begin
				nextState <= idleCMD0Mute;	
			end
		end
	end
	else
	begin
		nextState <= readyCMD2WaitResp;
	end
end

//CMD2RespCheck=============================

readyCMD2RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		RST_RC <= 1'b1;
		nextState <= readyCMD2RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		RST_RC <= 1'b1;
		nextState <= identCMD3Mute;
	end
	else
	begin
		nextState <= readyCMD2RespCheck;
	end
end
														
//ident-------------------------------------		
													
//identCMD3Mute===========================

identCMD3Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_RM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		ENA_STP_LR <= 1'b0;
		RST_RC <= 1'b0;
		
		nextState <= identCMD3Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= identCMD3Begin;
	end
	else
	begin
		nextState <= identCMD3Mute;
	end
end
		
//CMD3transferBegin=======================		

identCMD3Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP <= CMD3dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS <= CMD3dummy;
		nextState <= identCMD3Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD3");
		nextState <= identCMD3WaitResp;
	end
	else
	begin
		nextState <= identCMD3Begin;
	end
end
			
//CMD3waitResponse======================

identCMD3WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		ADDONE_RC <= 1'b0;
		
		nextState <= identCMD3WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for response errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) && 
		   (CRC_ERROR_STP == 1'b0))
		begin
			nextState <= identCMD3RespCheck;
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD3 response error");
				nextState <= identCMD3Mute;
			end
			else if (BLOCKNUM_RC >= cmdRepeatArbiter)
			begin
				nextState <= idleCMD0Mute;	
			end
		end
	end
	else
	begin
		nextState <= identCMD3WaitResp;
	end
end

//CMD3RespCheck======================

identCMD3RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		
		RST_RC <= 1'b1;

		nextState <= identCMD3RespCheck;	
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check for state errors
		if(((R6[cardStateBeg:cardStateEnd] == cardStateIdent) || 
			(R6[cardStateBeg:cardStateEnd] == cardStateStby)) && // supposed card current state
			(R6[generalErrorBit] == cardNoErr)) // no internal errors
		begin
			if(R6[crcPrevComBit] == cardNoErr)
			begin
				$display("CMD 3 R6 cur st %b ", R6[cardStateBeg:cardStateEnd]);
				nextState <= stbyCMD7Mute;
			end
			else
			begin
				$display("CRCError before CMD 3 seq");
				nextState <= readyCMD2Mute;
			end
		end
		else
		begin
			$display("State error");
			nextState <= idleCMD0Mute;
		end
	end
	else
	begin
		nextState <= identCMD3RespCheck;	
	end
end	

//stby------------------------------------	
						
//stbyCMD7Mute===========================

stbyCMD7Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_RM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		
		RST_RC <= 1'b0;
		
		nextState <= stbyCMD7Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= stbyCMD7Begin;
	end
	else
	begin
		nextState <= stbyCMD7Mute;
	end
end
		
//CMD3transferBegin=======================		

stbyCMD7Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP <= CMD7dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS [37:32] <= CMD7dummy[37:32];
		CMDBODY_PTS [31:16]<= R6[RCAbeg:RCAend];
		CMDBODY_PTS [15:0] <= CMD7dummy[15:0];
		nextState <= stbyCMD7Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD7");
		nextState <= stbyCMD7WaitResp;
	end
	else
	begin
		nextState <= stbyCMD7Begin;
	end
end
			
//CMD7waitResponse======================

stbyCMD7WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		
		ADDONE_RC <= 1'b0;

		nextState <= stbyCMD7WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for response errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
	   	(CRC_ERROR_STP == 1'b0))
		begin
			`ifdef doNotSimSDprg
			nextState <= stbyCMD7RespCheck;
			`else
			nextState <= stbyCMD7PrgNeed;
			`endif
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD7 response error");
				nextState <= stbyCMD7Begin;
			end
			else if (BLOCKNUM_RC >= cmdRepeatArbiter)
			begin
				nextState <= idleCMD0Mute;	
			end
		end
	end
	else
	begin
		nextState <= stbyCMD7WaitResp;
	end
end

//stbyCMD7PrgNeed===========================
 
stbyCMD7PrgNeed:
begin
	if(COMPLT_PRG == 1'b0)
	begin
		nextState <= stbyCMD7PrgNeed;
	end
	else if (COMPLT_PRG == 1'b1)
	begin
		nextState <= stbyCMD7RespCheck;
	end
	else
	begin
		nextState <= stbyCMD7PrgNeed;
	end	
end

//CMD7RespCheck======================

stbyCMD7RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		
		RST_RC <= 1'b1;
		
		nextState <= stbyCMD7RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check for state errors
		if(((R1a[cardStateBeg:cardStateEnd] == cardStateStby) || 
			(R1a[cardStateBeg:cardStateEnd] == cardStateTransfr)) && // supposed card current state
			(R1a[genErrBit] == cardNoErr) && // no general errors
			(R1a[internalErrBit] == cardNoErr)) // no internal errors
		begin
			if(R1a[crcPrevComBit] == cardNoErr)
			begin
				$display("CMD 7 R1b cur st %b , readyForData %b", R1a[cardStateBeg:cardStateEnd], R1a[readyForDataBit]);
				nextState <= transfrCMD55Mute;
			end
			else
			begin
				$display("CRCError before CMD 7 seq");
				nextState <= identCMD3Mute;
			end
		end
		else
		begin
			$display("State error");
			nextState <= idleCMD0Mute;
		end
	end
	else
	begin
		nextState <= stbyCMD7RespCheck;
	end
end		

//transfr-------------------------------	

//CMD55Mute=============================

transfrCMD55Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		ENA_RM <= 1'b0;
		
		RST_RC <= 1'b0;
		
		nextState <= transfrCMD55Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= transfrCMD55Begin;
	end
	else
	begin
		nextState <= transfrCMD55Mute;
	end
end

//CMD55transferBegin=======================	

transfrCMD55Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP <= CMD55dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS [37:32] <= CMD55dummy[37:32];
		CMDBODY_PTS [31:16]<= R6[RCAbeg:RCAend];
		CMDBODY_PTS [15:0] <= CMD55dummy[15:0];
		
		nextState <= transfrCMD55Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD55");
		nextState <= transfrCMD55WaitResp;
	end
	else
	begin
		nextState <= transfrCMD55Begin;
	end
end
	
//CMD55waitResponse=======================

transfrCMD55WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		
		ADDONE_RC <= 1'b0;
		
		nextState <= transfrCMD55WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
	   	(CRC_ERROR_STP == 1'b0))
		begin
			nextState <= transfrCMD55RespCheck;
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD55 response error");
				nextState <= transfrCMD55Mute;
			end
			else if (BLOCKNUM_RC >= cmdRepeatArbiter)
			begin
				nextState <= idleCMD0Mute;	
			end
		end
	end
	else
	begin
		nextState <= transfrCMD55WaitResp;
	end
end

//CMD55RespCheck======================

transfrCMD55RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		
		nextState <= transfrCMD55RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check for state errors
		if((R1[cardStateBeg:cardStateEnd] == cardStateTransfr) && // supposed card current state
			(R1[genErrBit] == cardNoErr) && // no general errors
			(R1[internalErrBit] == cardNoErr)) // no internal errors
		begin
			if(R1[crcPrevComBit] == cardNoErr)
			begin
				nextState <= transfrCMD6Begin;
			end
			else
			begin
				$display("CRCError before CMD 55 seq");
				nextState <= stbyCMD7Mute;
			end
		end
		else
		begin
			$display("State error");
			nextState <= idleCMD0Mute;
		end
	end
	else
	begin
		nextState <= transfrCMD55RespCheck;
	end
end	

//CMD6transferBegin=======================	

transfrCMD6Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ENA_RM <= 1'b0;
		
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP <= CMD6dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS <= CMD6dummy;
		
		nextState <= transfrCMD6Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD6");
		nextState <= transfrCMD6WaitResp;
	end
	else
	begin
		nextState <= transfrCMD6Begin;
	end
end
	
//CMD6waitResponse=======================

transfrCMD6WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		
		ADDONE_RC <= 1'b0;
		
		nextState <= transfrCMD6WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
	   	(CRC_ERROR_STP == 1'b0))
		begin
			nextState <= transfrCMD6RespCheck;
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD6 response error");
				nextState <= transfrCMD55Mute;
			end
			else if (BLOCKNUM_RC >= cmdRepeatArbiter)
			begin
				nextState <= idleCMD0Mute;	
			end
		end
	end
	else
	begin
		nextState <= transfrCMD6WaitResp;
	end
end

//CMD6RespCheck======================

transfrCMD6RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		
		RST_RC <= 1'b1;
		
		nextState <= transfrCMD6RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check for state errors
		if((R1[cardStateBeg:cardStateEnd] == cardStateTransfr) && // supposed card current state
			(R1[genErrBit] == cardNoErr) && // no general errors
			(R1[internalErrBit] == cardNoErr)) // no internal errors
		begin
			if(R1[crcPrevComBit] == cardNoErr)
			begin
				nextState <= transfrCMD16Mute;
			end
			else
			begin
				$display("CRCError before CMD 55 seq");
				nextState <= stbyCMD7Mute;
			end
		end
		else
		begin
			$display("State error");
			nextState <= idleCMD0Mute;
		end
	end
	else
	begin
		nextState <= transfrCMD6RespCheck;
	end
end

//CMD16Mute=============================

transfrCMD16Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		RST_RC <= 1'b0;
		
		ENA_RM <= 1'b0;
		
		nextState <= transfrCMD16Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= transfrCMD16Begin;
	end
	else
	begin
		nextState <= transfrCMD16Mute;
	end
end

//CMD16transferBegin=======================	

transfrCMD16Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;

		CMDINDEX_STP <= CMD16dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS <= CMD16dummy;
		
		nextState <= transfrCMD16Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD16");
		nextState <= transfrCMD16WaitResp;
	end
	else
	begin
		nextState <= transfrCMD16Begin;
	end
end
	
//CMD16waitResponse=======================

transfrCMD16WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		ADDONE_RC <= 1'b0;
		
		nextState <= transfrCMD16WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
	   	(CRC_ERROR_STP == 1'b0))
		begin
			nextState <= transfrCMD16RespCheck;
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD16 response error");
				nextState <= transfrCMD16Mute;
			end
			else
			begin if(BLOCKNUM_RC >= cmdRepeatArbiter)
				nextState <= idleCMD0Mute;
			end
		end
	end
	else
	begin
		nextState <= transfrCMD16WaitResp;
	end
end

//CMD16RespCheck======================

transfrCMD16RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		
		RST_RC <= 1'b1;

		nextState <= transfrCMD16RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check for state errors
		if((R1[cardStateBeg:cardStateEnd] == cardStateTransfr) && // supposed card current state
			(R1[genErrBit] == cardNoErr) && // no general errors
			(R1[internalErrBit] == cardNoErr)) // no internal errors
		begin
			if(R1[crcPrevComBit] == cardNoErr)
			begin
				nextState <= initComplt;
			end
			else
			begin
				$display("CRCError before CMD 55 seq");
				nextState <= transfrCMD55Mute;
			end
		end
		else
		begin
			$display("State error");
			nextState <= idleCMD0Mute;
		end
	end
	else
	begin
		nextState <= transfrCMD16RespCheck;
	end
end

//initComplt============================

initComplt:
begin
    ENA_CM <= 1'b0;
    ENA_PTS <= 1'b0;
    ENA_STP <= 1'b0;
    ENA_DS <= 1'b0;
    ENA_DW_P <= 1'b0;
    ENA_RM <= 1'b0;
    
    RST_RC <= 1'b1;
    
    INIT_COMPLT <= 1'b1;
    
    $display("Init complt");
    nextState <= initComplt;
end

//----------------------------------------------------------------

//=========================================
transfrBlockWriteCMD24Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		RST_RC <= 1'b0;
		
		W_READY <= 1'b0;
		WB_COMPLT <= 1'b0;	
		
		W_ERROR <= 1'b0;
				
		nextState <= transfrBlockWriteCMD24Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= transfrBlockWriteCMD24Begin ;
	end
	else
	begin
		nextState <= transfrBlockWriteCMD24Mute;
	end
end
//=========================================	
transfrBlockWriteCMD24Begin :
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP <= CMD24dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS [37:32] <= CMD24dummy[37:32];
		CMDBODY_PTS [31:0] <= ADDR;
		
		nextState <= transfrBlockWriteCMD24Begin ;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD24");
		nextState <= transfrBlockWriteCMD24WaitResp;
	end
	else
	begin
		nextState <= transfrBlockWriteCMD24Begin ;
	end
end
//=========================================
transfrBlockWriteCMD24WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		ADDONE_RC <= 1'b0;
				
		nextState <= transfrBlockWriteCMD24WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
	   	(CRC_ERROR_STP == 1'b0))
		begin
		`ifdef doNotSimSDinit							
        nextState <= transfrBlockWriteMute;
      `else
        nextState <= transfrBlockWriteCMD24RespCheck;
      `endif
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD24 response error");
				nextState <= transfrBlockWriteCMD24Mute;
			end
			else
			begin if(BLOCKNUM_RC >= cmdRepeatArbiter)
				W_ERROR <= 1'b1;
				nextState <= transfrBlockWriteComplt;
			end
		end
	end
	else
	begin
		nextState <= transfrBlockWriteCMD24WaitResp;
	end
end
//=========================================
transfrBlockWriteCMD24RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		RST_RC <= 1'b1;

		nextState <= transfrBlockWriteCMD24RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check for state errors
		if((R1[cardStateBeg:cardStateEnd] == cardStateTransfr) && // supposed card current state
			(R1[genErrBit] == cardNoErr) && // no general errors
			(R1[internalErrBit] == cardNoErr)) // no internal errors
		begin
			if(R1[crcPrevComBit] == cardNoErr)
			begin
				nextState <= transfrBlockWriteMute;
			end
			else
			begin
				$display("CRC error before CMD 24 seq");
				W_ERROR <= 1'b1;
				nextState <= transfrBlockWriteComplt;
			end
		end
		else
		begin
			W_ERROR <= 1'b1;
			nextState <= transfrBlockWriteComplt;
		end
	end
	else
	begin
		nextState <= transfrBlockWriteCMD24RespCheck;
	end
end
//=========================================
transfrBlockWriteMute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		ENA_DS <= 1'b0;
		ENA_DW_P <= 1'b0;
		ENA_DW_R <= 1'b0;
				
		nextState <= transfrBlockWriteMute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= transfrBlockWrite;
	end
	else
	begin
		nextState <= transfrBlockWriteMute;
	end
end
//=========================================
transfrBlockWrite:
begin
  if(WRITE_TYPE == 2'b00)
  begin
    
	if(COMPLT_DW_P == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_DW_P <= 1'b1;
		W_READY <= 1'b1;

		nextState <= transfrBlockWrite;
	end
	else if(COMPLT_DW_P == 1'b1)
	begin
		nextState <= transfrBlockWriteWaitStatus;
	end
	else
	begin
		nextState <= transfrBlockWrite;
	end
	
	end
	else if (WRITE_TYPE == 2'b01)
	begin
    
	if(COMPLT_DW_R == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_DW_R <= 1'b1;
		W_READY <= 1'b1;
		
		RADDR_BEGIN_R <= 11'h000;

		nextState <= transfrBlockWrite;
	end
	else if(COMPLT_DW_R == 1'b1)
	begin
		nextState <= transfrBlockWriteWaitStatus;
	end
	else
	begin
		nextState <= transfrBlockWrite;
	end
	
	end
	else
	begin
	  nextState <= transfrBlockWrite;
	end
end
//=========================================
transfrBlockWriteWaitStatus:
begin
	if(COMPLT_DS == 1'b0)
	begin
		ENA_DW_P <= 1'b0;
		ENA_DW_R <= 1'b0;
		ENA_DS <= 1'b1;
		
		nextState <= transfrBlockWriteWaitStatus;
	end
	else if(COMPLT_DS == 1'b1)
	begin
		//check for errors
		if(STATUS_DS == 1'b0)
		begin
			nextState <= transfrBlockWritePrgNeed;
		end
		else
		begin
			W_ERROR <= 1'b1;
			nextState <= transfrBlockWriteComplt;
		end
	end
	else
	begin
		nextState <= transfrBlockWriteWaitStatus;
	end
end
//=========================================
transfrBlockWritePrgNeed:
begin
	ENA_DS <= 1'b0;

	if(COMPLT_PRG == 1'b0)
	begin
		nextState <= transfrBlockWritePrgNeed;
	end
	else if (COMPLT_PRG == 1'b1)
	begin
		nextState <= transfrBlockWriteComplt;
	end
	else
	begin
		nextState <= transfrBlockWritePrgNeed;
	end	
end

//=========================================
transfrBlockWriteComplt:
begin
	 ENA_CM <= 1'b0;
	 ENA_PTS <= 1'b0;
	 ENA_STP <= 1'b0;
	 ENA_DS <= 1'b0;
	 ENA_DW_P <= 1'b0;
	 ENA_RM <= 1'b0;
	
	 RST_RC <= 1'b1;
	
	 WB_COMPLT <= 1'b1;	
	
	 $display("Block transfr complt");
	 nextState <= transfrBlockWriteComplt;
end

//----------------------------------------------------------------

//=========================================
transfrBlockReadCMD17Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		RST_RC <= 1'b0;
		
		RB_COMPLT <= 1'b0;	
		
		RB_CMDERROR <= 1'b0;
				
		nextState <= transfrBlockReadCMD17Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= transfrBlockReadCMD17Begin;
	end
	else
	begin
		nextState <= transfrBlockReadCMD17Mute;
	end
end
//=========================================	
transfrBlockReadCMD17Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP <= CMD17dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS [37:32] <= CMD17dummy[37:32];
		CMDBODY_PTS [31:0] <= ADDR;
		
		nextState <= transfrBlockReadCMD17Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD17");
		nextState <= transfrBlockReadCMD17WaitResp;
	end
	else
	begin
		nextState <= transfrBlockReadCMD17Begin;
	end
end
//=========================================
transfrBlockReadCMD17WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		ADDONE_RC <= 1'b0;
			
		ENA_DR <= 1'b1;
				
		nextState <= transfrBlockReadCMD17WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
	   	(CRC_ERROR_STP == 1'b0))
		begin
			nextState <= transfrBlockReadCMD17RespCheck;
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD17 response error");
				nextState <= transfrBlockReadCMD17Mute;
			end
			else
			begin if(BLOCKNUM_RC >= cmdRepeatArbiter)
				RB_CMDERROR <= 1'b1;
				nextState <= transfrBlockReadComplt;
			end
		end
	end
	else
	begin
		nextState <= transfrBlockReadCMD17WaitResp;
	end
end
//=========================================
transfrBlockReadCMD17RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		RST_RC <= 1'b1;
		
		ENA_DR <= 1'b1;

		nextState <= transfrBlockReadCMD17RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check for state errors
		if((R1[cardStateBeg:cardStateEnd] == cardStateTransfr) && // supposed card current state
			(R1[genErrBit] == cardNoErr) && // no general errors
			(R1[internalErrBit] == cardNoErr)) // no internal errors
		begin
			if(R1[crcPrevComBit] == cardNoErr)
			begin
				nextState <= transfrBlockRead;
			end
			else
			begin
				$display("CRC error before CMD 17 seq");
				RB_CMDERROR <= 1'b1;
				nextState <= transfrBlockReadComplt;
			end
		end
		else
		begin
			RB_CMDERROR <= 1'b1;
			nextState <= transfrBlockReadComplt;
		end
	end
	else
	begin
		nextState <= transfrBlockReadCMD17RespCheck;
	end
end
//=========================================
transfrBlockRead:
begin
	if(COMPLT_DR == 1'b0)
	begin		
		ENA_RM <= 1'b0;
		ENA_DR <= 1'b1;

		nextState <= transfrBlockRead;
	end
	else if(COMPLT_DR == 1'b1)
	begin
		nextState <= transfrBlockReadComplt;
	end
	else
	begin
		nextState <= transfrBlockRead;
	end
end
//=========================================
transfrBlockReadComplt:
begin
	 ENA_CM <= 1'b0;
	 ENA_PTS <= 1'b0;
	 ENA_STP <= 1'b0;
	 ENA_DS <= 1'b0;
	 ENA_DW_P <= 1'b0;
	 ENA_RM <= 1'b0;
	
	 RST_RC <= 1'b1;
	
	 RB_COMPLT <= 1'b1;	
	
	 $display("Block transfr complt");
	 nextState <= transfrBlockReadComplt;
end

//----------------------------------------------------------------

//=========================================
transfrMultWriteCMD25Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		RST_RC <= 1'b0;
		RST_BC <= 1'b1;
		
		W_READY <= 1'b0;
		WMB_COMPLT <= 1'b0;	
		
		W_ERROR <= 1'b0;
				
		nextState <= transfrMultWriteCMD25Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= transfrMultWriteCMD25Begin;
	end
	else
	begin
		nextState <= transfrMultWriteCMD25Mute;
	end
end
//=========================================	
transfrMultWriteCMD25Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;
		RST_BC <= 1'b1;
		
		CMDINDEX_STP <= CMD25dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS [37:32] <= CMD25dummy[37:32];
		CMDBODY_PTS [31:0] <= ADDR;
		
		nextState <= transfrMultWriteCMD25Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD25");
		nextState <= transfrMultWriteCMD25WaitResp;
	end
	else
	begin
		nextState <= transfrMultWriteCMD25Begin;
	end
end
//=========================================
transfrMultWriteCMD25WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		ADDONE_RC <= 1'b0;
		
		RST_BC <= 1'b0;

		nextState <= transfrMultWriteCMD25WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
	   	(CRC_ERROR_STP == 1'b0))
		begin
		`ifdef doNotSimSDinit							
        nextState <= transfrMultWriteMute;
      `else
        nextState <= transfrMultWriteCMD25RespCheck;
      `endif
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD25 response error");
				nextState <= transfrMultWriteCMD25Mute;
			end
			else
			begin if(BLOCKNUM_RC >= cmdRepeatArbiter)
				W_ERROR <= 1'b1;
				nextState <= transfrMultWriteComplt;
			end
		end
	end
	else
	begin
		nextState <= transfrBlockWriteCMD24WaitResp;
	end
end
//=========================================
transfrMultWriteCMD25RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		RST_RC <= 1'b1;
		RST_BC <= 1'b0;

		nextState <= transfrMultWriteCMD25RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		//check for state errors
		if((R1[cardStateBeg:cardStateEnd] == cardStateTransfr) && // supposed card current state
			(R1[genErrBit] == cardNoErr) && // no general errors
			(R1[internalErrBit] == cardNoErr)) // no internal errors
		begin
			if(R1[crcPrevComBit] == cardNoErr)
			begin
				nextState <= transfrMultWriteMute;
			end
			else
			begin
				$display("CRC error before CMD 25 seq");
				W_ERROR <= 1'b1;
				nextState <= transfrMultWriteComplt;
			end
		end
		else
		begin
			W_ERROR <= 1'b1;
			nextState <= transfrMultWriteComplt;
		end
	end
	else
	begin
		nextState <= transfrMultWriteCMD25RespCheck;
	end
end
//=========================================
transfrMultWriteMute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b0;
		ENA_DS <= 1'b0;
		ENA_DW_P <= 1'b0;
		ENA_DW_R <= 1'b0;
		ENA_DW_OA <= 1'b0;
		
		RST_BC <= 1'b1;
				
		nextState <= transfrMultWriteMute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= transfrMultWrite;
	end
	else
	begin
		nextState <= transfrMultWriteMute;
	end
end
//=========================================
transfrMultWrite:
begin
	ENA_CM <= 1'b0;
	RST_BC <= 1'b0;
	
	if(WRITE_TYPE == 2'b00)
	begin
    
	if(COMPLT_DW_P == 1'b0)
	begin
		ADDONE_BC <= 1'b0;
		W_READY <= 1'b1;	
		ENA_DW_P <= 1'b1;
		nextState <= transfrMultWrite;
	end
	else if(COMPLT_DW_P == 1'b1)
	begin
		nextState <= transfrMultWriteWaitStatus;
	end
	else
	begin
		nextState <= transfrMultWrite;
	end
	
	end
	else if (WRITE_TYPE == 2'b01)
	begin
    
	if(COMPLT_DW_R == 1'b0)
	begin
		ADDONE_BC <= 1'b0;
		W_READY <= 1'b1;
		ENA_DW_R <= 1'b1;
		nextState <= transfrMultWrite;
	end
	else if(COMPLT_DW_R == 1'b1)
	begin
		nextState <= transfrMultWriteWaitStatus;
	end
	else
	begin
		nextState <= transfrMultWrite;
	end
	
	end
	else if (WRITE_TYPE == 2'b10)
	begin
		ADDONE_BC <= 1'b0;
		W_READY <= 1'b1;
		nextState <= transfrMultWriteWaitFirstBufFull;
	
	end
	else if (WRITE_TYPE == 2'b11)
	begin
    
	if(COMPLT_DW_OA == 1'b0)
	begin
		ADDONE_BC <= 1'b1;
		W_READY <= 1'b1;
		ENA_DW_OA <= 1'b1;
		nextState <= transfrMultWrite;
	end
	else if(COMPLT_DW_OA == 1'b1)
	begin
		nextState <= transfrMultWriteWaitStatus;
	end
	else
	begin
		nextState <= transfrMultWrite;
	end
	
	end
	else
	begin
	  nextState <= transfrMultWrite;
	end
end
//=========================================
transfrMultWriteWaitStatus:
begin
	if(COMPLT_DS == 1'b0)
	begin
		ENA_DW_P <= 1'b0;
		ENA_DW_R <= 1'b0;
		ENA_DW_OA <= 1'b0;
		ENA_DS <= 1'b1;
		ADDONE_BC <= 1'b0;
		
		RST_BC <= 1'b0;
		
		nextState <= transfrMultWriteWaitStatus;
	end
	else if(COMPLT_DS == 1'b1)
	begin
		//check for errors
		if(STATUS_DS == 1'b0)
		begin
			nextState <= transfrMultWritePrgNeed;
		end
		else
		begin
			`ifdef doNotSimSDinit
			nextState <= transfrMultWriteCheckComplt;
			`else
			W_ERROR <= 1'b1;
			nextState <= transfrMultWriteComplt;
			`endif
		end
	end
	else
	begin
		nextState <= transfrMultWriteWaitStatus;
	end
end
//=========================================
transfrMultWritePrgNeed:
begin
	ENA_DS <= 1'b0;
	RST_BC <= 1'b0;

	if(COMPLT_PRG == 1'b0)
	begin
		nextState <= transfrMultWritePrgNeed;
	end
	else if (COMPLT_PRG == 1'b1)
	begin
		nextState <= transfrMultWriteCheckComplt;
	end
	else
	begin
		nextState <= transfrMultWritePrgNeed;
	end	
end

//=========================================
transfrMultWriteCheckComplt:
begin		
	if(!COMPLT_RM)
	begin
		ENA_DW_R <= 1'b0;
		ENA_DS <= 1'b0;
		ENA_RM <= 1'b1;
		RST_BC <= 1'b0;
		ADDONE_BC <= 1'b0;
		
		nextState <= transfrMultWriteCheckComplt;
	end
	else if (COMPLT_RM)
	begin
		if(WMB_NUM < WMB_COUNT)//mult block trans counter from counter MF, MWB_COUNT - from parent block
		begin
			if(WMB_STOP_TRSFR)
			begin
				nextState <= transfrMultWriteCMD12Begin;				
			end
			else
			begin
				nextState <= transfrMultWrite;
			end
		end
		else
		begin
			nextState <= transfrMultWriteCMD12Begin;
		end
	end
	else
	begin
		nextState <= transfrMultWriteCheckComplt;
	end
end

//=========================================
transfrMultWriteCMD12Mute:
begin
	if(COMPLT_CM == 1'b0)
	begin
		ENA_CM <= 1'b1;
		RST_RC <= 1'b0;
		ENA_RM <= 1'b0;
		
		RST_BC <= 1'b0;
				
		nextState <= transfrMultWriteCMD12Mute;
	end
	else if(COMPLT_CM == 1'b1)
	begin
		nextState <= transfrMultWriteCMD12Begin;
	end
	else
	begin
		nextState <= transfrMultWriteCMD12Mute;
	end
end
//=========================================	
transfrMultWriteCMD12Begin:
begin
	if(COMPLT_PTS == 1'b0)
	begin		
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b1;
		ENA_STP <= 1'b0;
		ADDONE_RC <= 1'b1;
		
		CMDINDEX_STP <= CMD12dummy[cmdBobyWidth:cmdBobyWidth-5];
		CMDBODY_PTS [37:0] <= CMD12dummy[37:0];
		
		nextState <= transfrMultWriteCMD12Begin;
	end
	else if(COMPLT_PTS == 1'b1)
	begin
		$display("CMD12");
		nextState <= transfrMultWriteCMD12WaitResp;
	end
	else
	begin
		nextState <= transfrMultWriteCMD12Begin;
	end
end
//=========================================
transfrMultWriteCMD12WaitResp:
begin
	if(COMPLT_STP == 1'b0)
	begin
		ENA_CM <= 1'b0;
		ENA_PTS <= 1'b0;
		ENA_STP <= 1'b1;
		ADDONE_RC <= 1'b0;
				
		nextState <= transfrMultWriteCMD12WaitResp;
	end
	else if(COMPLT_STP == 1'b1)
	begin
		//check for errors
		if((STATUS_STP == 1'b0) && (NORESP_STP == 1'b0) &&
	   	(CRC_ERROR_STP == 1'b0))
		begin
			`ifdef doNotSimSDinit							
        nextState <= transfrMultWriteComplt;
      `else
        nextState <= transfrMultWriteCMD12RespCheck;
      `endif
		end
		else
		begin
			if(BLOCKNUM_RC < cmdRepeatArbiter)
			begin
				$display("CMD12 response error");
				nextState <= transfrMultWriteCMD12Mute;
			end
			else
			begin if(BLOCKNUM_RC >= cmdRepeatArbiter)
				W_ERROR <= 1'b1;
				nextState <= transfrMultWriteComplt;
			end
		end
	end
	else
	begin
		nextState <= transfrMultWriteCMD12WaitResp;
	end
end
//=========================================
transfrMultWriteCMD12RespCheck:
begin
	if(COMPLT_RM == 1'b0)
	begin
		ENA_RM <= 1'b1;
		ENA_STP <= 1'b0;
		RST_RC <= 1'b1;
		
		nextState <= transfrMultWriteCMD12RespCheck;
	end
	else if(COMPLT_RM == 1'b1)
	begin
		nextState <= transfrMultWriteCMD12PrgNeed;
	end
	else
	begin
		nextState <= transfrMultWriteCMD12RespCheck;
	end
end
//=========================================
transfrMultWriteCMD12PrgNeed:
begin
	ENA_RM <= 1'b0;

	if(COMPLT_PRG == 1'b0)
	begin
		nextState <= transfrMultWriteCMD12PrgNeed;
	end
	else if (COMPLT_PRG == 1'b1)
	begin
		nextState <= transfrMultWriteComplt;
	end
	else
	begin
		nextState <= transfrMultWriteCMD12PrgNeed;
	end	
end
//=========================================
transfrMultWriteComplt:
begin
	 ENA_CM <= 1'b0;
	 ENA_PTS <= 1'b0;
	 ENA_STP <= 1'b0;
	 ENA_DS <= 1'b0;
	 ENA_DW_P <= 1'b0;
	 ENA_DW_R <= 1'b0;
	 ENA_DW_OA <= 1'b0;
	 ENA_RM <= 1'b0;
	
	 RST_RC <= 1'b1;
	 RST_BC <= 1'b1;
	 ADDONE_BC <= 1'b0;
	
	 WMB_COMPLT <= 1'b1;	
	
	 $display("Mult block transfr complt");
	 nextState <= transfrMultWriteComplt;
end

//=========================================
transfrMultWriteWaitFirstBufFull:
begin
	if(BUFREADY != 2'b01)
	begin
		RST_BC <= 1'b0;
		ADDONE_BC <= 1'b0;
		ENA_RM <= 1'b0;
		RADDR_BEGIN_R <= 11'd0;

		nextState <= transfrMultWriteWaitFirstBufFull;
	end
	else if(BUFREADY == 2'b01)
	begin
		nextState <= transfrMultWriteFirstBuf;
	end
	else
	begin
		nextState <= transfrMultWriteWaitFirstBufFull;
	end
end
//=========================================
transfrMultWriteFirstBuf:
begin
	if(COMPLT_DW_R == 1'b0)
	begin
		RST_BC <= 1'b0;
		ADDONE_BC <= 1'b0;
		ENA_DW_R <= 1'b1;
		RADDR_BEGIN_R <= 11'd0;
		
		nextState <= transfrMultWriteFirstBuf;
	end
	else if(COMPLT_DW_R == 1'b1)
	begin
		nextState <= transfrMultWriteWaitFirstBufStatus;
	end
	else
	begin
		nextState <= transfrMultWriteFirstBuf;
	end
end
//=========================================
transfrMultWriteWaitFirstBufStatus:
begin
	if(COMPLT_DS == 1'b0)
	begin
		RST_BC <= 1'b0;
		ADDONE_BC <= 1'b0;
		ENA_DW_R <= 1'b0;
		ENA_DS <= 1'b1;
		
		nextState <= transfrMultWriteWaitFirstBufStatus;
	end
	else if(COMPLT_DS == 1'b1)
	begin
		//check for errors
		if(STATUS_DS == 1'b0)
		begin
			nextState <= transfrMultWritePrgNeedFirstBuf;
		end
		else
		begin
			`ifdef doNotSimSDinit
			nextState <= transfrMultWriteWaitSecondBufFull;
			`else
			W_ERROR <= 1'b1;
			nextState <= transfrMultWriteComplt;
			`endif
		end
	end
	else
	begin
		nextState <= transfrMultWriteWaitFirstBufStatus;
	end
end
//=========================================
transfrMultWritePrgNeedFirstBuf:
begin
	ENA_DS <= 1'b0;
	RST_BC <= 1'b0;
	ADDONE_BC <= 1'b1;
	
	if(COMPLT_PRG == 1'b0)
	begin
		nextState <= transfrMultWritePrgNeedFirstBuf;
	end
	else if (COMPLT_PRG == 1'b1)
	begin
		nextState <= transfrMultWriteWaitSecondBufFull;
	end
	else
	begin
		nextState <= transfrMultWritePrgNeedFirstBuf;
	end	
end
//=========================================
transfrMultWriteWaitSecondBufFull:
begin
	if(BUFREADY != 2'b10)
	begin
		RST_BC <= 1'b0;
		ADDONE_BC <= 1'b0;

		RADDR_BEGIN_R <= 11'd1024;

		nextState <= transfrMultWriteWaitSecondBufFull;
	end
	else if(BUFREADY == 2'b10)
	begin
		nextState <= transfrMultWriteSecondBuf;
	end
	else
	begin
		nextState <= transfrMultWriteWaitSecondBufFull;
	end
end
//=========================================
transfrMultWriteSecondBuf:
begin
	if(COMPLT_DW_R == 1'b0)
	begin		
		RST_BC <= 1'b0;
		ADDONE_BC <= 1'b0;
		ENA_DW_R <= 1'b1;

		RADDR_BEGIN_R <= 11'd1024;
		
		nextState <= transfrMultWriteSecondBuf;
	end
	else if(COMPLT_DW_R == 1'b1)
	begin
		nextState <= transfrMultWriteWaitSecondBufStatus;
	end
	else
	begin
		nextState <= transfrMultWriteSecondBuf;
	end
end
//=========================================
transfrMultWriteWaitSecondBufStatus:
begin
	if(COMPLT_DS == 1'b0)
	begin
		RST_BC <= 1'b0;
		ENA_DW_R <= 1'b0;
		ENA_DS <= 1'b1;
		ADDONE_BC <= 1'b0;
		
		nextState <= transfrMultWriteWaitSecondBufStatus;
	end
	else if(COMPLT_DS == 1'b1)
	begin
		//check for errors
		if(STATUS_DS == 1'b0)
		begin
			nextState <= transfrMultWritePrgNeedSecondBuf;
		end
		else
		begin
			`ifdef doNotSimSDinit
			nextState <= transfrMultWriteCheckComplt;
			`else
			W_ERROR <= 1'b1;
			nextState <= transfrMultWriteComplt;
			`endif
		end
	end
	else
	begin
		nextState <= transfrMultWriteWaitSecondBufStatus;
	end
end
//=========================================
transfrMultWritePrgNeedSecondBuf:
begin
	ENA_DS <= 1'b0;
	RST_BC <= 1'b0;
	ADDONE_BC <= 1'b1;

	if(COMPLT_PRG == 1'b0)
	begin
		nextState <= transfrMultWritePrgNeedSecondBuf;
	end
	else if (COMPLT_PRG == 1'b1)
	begin
		nextState <= transfrMultWriteCheckComplt;
	end
	else
	begin
		nextState <= transfrMultWritePrgNeedSecondBuf;
	end	
end
//----------------------------------------------------------------

//waitAction-------------------------------	
waitAction:
begin
	ENA_IM <= 1'b0;
	ENA_CM <= 1'b1;
	ENA_VM <= 1'b0;
	ENA_RM <= 1'b0;
	ENA_PTS <= 1'b0;
	ENA_STP <= 1'b0;
	ENA_STP_LR <= 1'b0;
	ENA_DS <= 1'b0;
	ENA_DW_P <= 1'b0;
	ENA_DW_R <= 1'b0;
		
	RST_BC <= 1'b1;
	RST_RC <= 1'b1;
	RST_AC <= 1'b1;
	RST_ADRC <= 1'b1;
		
	RB_COMPLT <= 1'b0;
	WB_COMPLT <= 1'b0;
	RMB_COMPLT <= 1'b0;
	WMB_COMPLT <= 1'b0;
	
	RADDR_BEGIN_R <= 11'h000;
	
	$display ("CommandLevelDriver waits");
	
	nextState <= waitAction;
end
//unavaliable-----------------------------	
unavaliable:
begin
	ENA_IM <= 1'b0;
	ENA_CM <= 1'b1;
	ENA_VM <= 1'b0;
	ENA_RM <= 1'b0;
	ENA_PTS <= 1'b0;
	ENA_STP <= 1'b0;
	ENA_STP_LR <= 1'b0;
	ENA_DS <= 1'b0;
	ENA_DW_P <= 1'b0;
	ENA_DW_R <= 1'b0;
		
	RST_BC <= 1'b1;
	RST_RC <= 1'b1;
	RST_AC <= 1'b1;
	RST_ADRC <= 1'b1;
	
	$display ("CommandLevelDriver FSM became unavaliable");
	
	nextState <= unavaliable;
end

//default----------------------------------					 
default: 
begin
	$display ("CommandLevelDriver FSM reached undefined state");
end
//-----------------------------------------

endcase
end //else RST
end //always
 
//FSM end

endmodule // incDevFIRBUp3_sdModel
